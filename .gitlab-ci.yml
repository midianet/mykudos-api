#LPS-PIPELINE HERDAR DE PORJETO BASE

stages:
  - prepare
  - build
  - sonar
  - package
  - publish
  - tag

variables:
  APP_NAME:          "mykudos-api"
  DOCKER_IMAGE_NAME: "${NEXUS_URL}/${APP_NAME}"
  #  DEV_PREFIX:        "dev"
  #  HOM_PREFIX:        "hom"
  #  PRO_PREFIX:        "pro"
  APP_URL_SUFIX:     "lps.krthomolog.com.br"
  APP_VERSION:       ""

prepare-job:
  stage: prepare
  tags:
    - cogna
  image: alpine:3.16 #trocar imagem
  before_script:
    - echo "ü•Å Iniciando est√°gio de prepara√ß√£o."
  script:
    - CURRENT_BRANCH=$CI_COMMIT_REF_NAME
    - echo "Branch atual - $CURRENT_BRANCH"
    #    - |
    #      if [[ $CURRENT_BRANCH == develop ]]; then
    #        APP_VERSION="latest"
    #        APP_NAMESPACE="${DEV_PREFIX}"
    #        ENV_URL_PREFIX="-${DEV_PREFIX}"
    #        cp .kube/config-dev.yml .kube/config.yml
    #      elif [[ $CURRENT_BRANCH == release/* || $CURRENT_BRANCH == hotfix/* ]]; then
    #        APP_VERSION=${CURRENT_BRANCH#*/}
    #        APP_NAMESPACE="${HOM_PREFIX}"
    #        ENV_URL_PREFIX="-${HOMO_PREFIX}"
    #        cp .kube/config-homo.yml .kube/config.yml
    #      elif [[ $CURRENT_BRANCH == master ]]; then
    #          CURRENT_BRANCH=`echo $CI_COMMIT_TITLE | cut -d"'" -f 2`
    #          if [ -z "$CURRENT_BRANCH" ]; then
    #            echo "üö® Master necessita vir de um merge request."
    #            exit 1
    #          else
    #            APP_VERSION=${CURRENT_BRANCH#*/}
    #            APP_NAMESPACE="${PRO_PREFIX}"
    #            ENV_URL_PREFIX=""
    #            cp .kube/config-prod.yml .kube/config.yml
    #          fi
    #      else
    #        echo "üö® Branch atual n√£o √© release/*, hotfix/* ou master."
    #        exit 1
    #      fi
    #    - APP_URL="${APP_NAME}${ENV_URL_PREFIX}.${APP_URL_SUFIX}"
    - APP_URL="${APP_NAME}.${APP_URL_SUFIX}"  #fixed
    - APP_VERSION="latest"                    #fixed
    - APP_NAMESPACE="default"                 #fixed
    - echo $APP_NAMESPACE > namespace-ci.txt
    - echo $APP_VERSION > version-ci.txt
    - echo $APP_URL > url-ci.txt
    - echo "üëÄ Vers√£o - $APP_VERSION"
    - echo "üëÄ Namespace - $APP_NAMESPACE"
    - echo "üëÄ URL - $APP_URL"
    - cp .kube/config-dev.yml .kube/config.yml
  after_script:
    - echo "üéØ Est√°gio de prepara√ß√£o finalizado."
  artifacts:
    paths:
      - version-ci.txt
      - namespace-ci.txt
      - url-ci.txt
      - .kube/config.yml
  except:
    - /^feature\/.*/

build-job:
  image: maven:3.6.3-openjdk-17-slim  #openjdk:17-jdk-alpine3.14
  stage: build
  tags:
    - cogna  
  cache:
    key: ${APP_NAME}
    paths:
      - .m2/repository
  script:
    - mvn -Dmaven.repo.local=.m2/repository clean package -DskipTests
  artifacts:
    paths:
      - target/${APP_NAME}.jar
  only:
    - develop
    - /^release\/.*/
    - /^hotfix\/.*/

package-job:
  image: docker:latest
  stage: package
  tags:
  - cogna
  services:
    - name: docker:dind
      command: ["--insecure-registry=docker.lps.krthomolog.com.br"]
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - echo "ü•Å Iniciando est√°gio de empacotamento (package)."
    - echo "deployer" | docker login docker.lps.krthomolog.com.br --username deployer --password-stdin
    - export APP_VERSION=$(cat version-ci.txt)
  # $NEXUS_URL
  script:
    - docker build -t $DOCKER_IMAGE_NAME:$APP_VERSION .
    - docker push $DOCKER_IMAGE_NAME:$APP_VERSION
  after_script:
    - echo "üéØ Est√°gio de empacotamento (package) finalizado."
  except:
    - /^feature\/.*/
    - master

publish-job:
  stage: publish
  tags:
    - cogna  
  image: midianet/kubectl:4.2
  before_script:
    - echo "ü•Å Iniciando est√°gio de publica√ß√£o."
    - export APP_VERSION=$(cat version-ci.txt)
    - export APP_URL=$(cat url-ci.txt)
    - export APP_NAMESPACE=$(cat namespace-ci.txt)
    - sed -i "s/\[VERSION_CI\]/$APP_VERSION/g" .kube/deploy.yml
    - sed -i "s/\[URL_CI\]/$APP_URL/g" .kube/ingress.yml
  script:
    - kubectl apply  -n $APP_NAMESPACE -f .kube/config.yml
    - kubectl apply  -n $APP_NAMESPACE -f .kube/service.yml
    - kubectl apply  -n $APP_NAMESPACE -f .kube/ingress.yml
    - kubectl delete -n $APP_NAMESPACE -f .kube/deploy.yml --ignore-not-found=true
    - kubectl create -n $APP_NAMESPACE -f .kube/deploy.yml
  after_script:
    - echo "üéØ Est√°gio de publica√ß√£o finalizado."
  except:
    - /^feature\/.*/